
TODO:

  - more sophisticated handling of zip files

  - log errors/messages in a log file instead of System.err
  
  - cache should remember failed URL load attempts ?

  - fix unifyWith in CompSig.java : see TODO comment

  - add more primitive fetch(ISig) to DataSource
    lift fetch(Class ...) from XMLDataSource to DataSource

  - make a native (direct) JSONDataSource instead of going to XML

  - regexp data source - uses REs patterns to split, or identify, rows and parse fields

  - add file chooser, that also copies path to the clipboard upon selection

  - for non-xml sources that are loaded and then transferred to xmldatasource, set up caching mechanism so
    that the xml can be cached, and future requests to that data source (even if as json/csv), if loaded from
    cache, will be loaded from the xml cache, instead of going through the original data.
    (maybe set up the cache interaction so that it goes thru a callback mechanism - loading from either
     cache or original data?)
  
  - provide way to sample large data set and produce a mini-version and save it locally
  
  - track number of times particular ISig is fetched, and after some point, cache a representation of the 
      parsed data?

 - get this set up to be added to the gallery of processing libraries
 
  - when inferring, consider all tags of the same name in the data, instead of just the first one
    in case some have different structure (?) - ebay example - but this could be very inefficient;
    eventually, try to use provided schemas if available?
    
  - try to skip BOM characters if they exist, in IOUtil.createReader(...)


FUTURE:

 maybe have every datafield be a list by default - eliminate ListField, if possible?
 
 

DataSourceManager
 - getCacheLocation() : String
 - setCacheLocation(String path)
 - getCacheTimeout() : long
 - setCacheTimeout(long msec)  

 - listAll() : String[]
 - usage(String dsName)
 - use(String dsName, String ops...)
 

IDataSource
 - fetchObject(String clsName, String flds...) : Object
 
 - fetchObjects(String clsName, String flds...) : ArrayList<Object>
 - fetchObjects(int N, String clsName, String flds...) : ArrayList<Object>
 
 - fetchObjectArray(String clsName, String flds...) : Object[]
 - fetchObjectArray(int N, String clsName, String flds...) : Object[]
 
 - fillObjectArray(Object[] A, String clsName, String flds...) 

 - filter(string key, string value)
 - select(string serviceName)
 - usage()
 
 
 
AbsDataSource : IDataSource
 - isEmpty() : boolean
 - numRecords() : int
 - getRecord(int i) : IDataRow
 - saveToFile(File) : boolean
 - readFromFile(File) : boolean


Weather : AbsDataSource
 Weather(String zipcode)

XMLDataSource : AbsDataSource

CSVDataSource : AbsDataSource

TestDataSource : AbsDataSource
 - addRecord(IDataRecord)


IDataRecord
  maps  name -> IDataField
 - fieldNames() : String[]
  
IDataField
 - asInt() : int
 - asLong() : long
 - asString() : String
 - asDouble() : double
 - asFloat() : float
 - asBoolean() : boolean
 - asChar() : char
 - asArrayList(Class<T> cls) : ArrayList<T>
 - asArray(Class<T> cls) : T[]
 - isList() : boolean
 - isPrimitive() : boolean


HashRecord : IDataRecord
 map String -> StringField/ListField

StringField : IDataField
ListField : IDataField



xml = 
<body>
<report>
   <date> ... </date>
   <reading>
      <time> ... </time>
   	  <temp> ... </temp>
   </reading>
   <reading>
   	  <time> ... </time>
   	  <temp> ... </temp>
   </reading>
</report>
</body>


rp = new CompField("report")
rp.add(new PrimField("date"))

rd = new CompField("reading")
rd.add("time", new PrimField("time"))
rd.add("temperature", new PrimField("temp"))
rp.add("readings", new ListField(rd))

xml = load...()
xds = new XMLDataSource(xml)
xds.addService("weather report", rp, true)   // gives back structured  (default service)
xds.addService("weather reading", new CompField("report/reading"))   // gives back single reading
xds.addService("weather reading list", new ListField(new CompField("report/reading")));  // gives back list of all readings
xds.addService("date", new PrimField("date"))

...

xds.selectService("date")
xds.fetchString()

xds.fetch(xds.object("Report", "date", xds.listOf(xds.object("Reading", "time", "temp"))))
xds.fetchObject("Reading", "date", "time", "temp");   // nested/array/flattened object - should happen automatically (?)
xds.fetchObject("Report1", "date", xds.object("Reading", "time", "temp"))  // nested objects

xds.selectService("weather reading list");
xds.fetch(xds.listOf(xds.object("Reading", "time", "temp")))


DataSource ds = DataSource.connectXML("http://fe.org/veh.xml").set("apikey", "x43gjk4").load();


<datasource>
	<path>http://www.cnpp.usda.gov/Innovations/DataSource/MyFoodapediaData.zip</path>
	<filetype>xml</filetype>
</datasource>


<datasourcespec>
	<loaderclass>XMLDataSource</loaderclass>
	
	<name>FAA Airport Status</name>
	<infourl>http://services.faa.gov/docs/services/airport/</infourl>
	<description>Serves airport status and delay information from the Air Traffic Control System Command Center (ATCSCC) as displayed on http://fly.faa.gov/</description>

	<options>
		<option><name>xmlpreprocclass</name><value>WeatherConsolidate</value></option>
	</options>

	<path>http://services.faa.gov/airport/status/@{airportCode}"</path>
	
	<params>
		<queryparam hidden="hidden">
			<key>format</key>
			<value>application/xml</value>
		</queryparam>
		<pathparam>
			<key>airportCode</key>
			<required>true</required>
			<description>3-digit FAA code</description>
		</pathparam>
	</params>
		
	<cache>
		<timeout>3600000</timeout>                /* msecs */
		<directory>cache</directory>             /* @{tempdir}  @{homedir}  @{curdir} =/= @{sketchdir} */
	</cache>
	
	<dataspec>
		<compfield>
			<basepath />
			<description>airport status and delay information</description>
			<fields>
				<field>
					<name>City</name>
					<primfield>
						<path>City</path>
						<description>name of the city where the airport is</description>
					</primfield>
				</field>
				
				<field>
					<name>Status Comment</name>
					<primfield>
						<path>Status/Reason</path>
					</primfield>
				</field>
				
				<field>
					<name>Status</name>
					<compfield>
						<basepath>Status</basepath>
						<fields>
							<field>
								<name>Reason</name>
								<primfield>
									<path>Reason</path>
								</primfield>
							</field>
						</fields>
					</compfield>
				</field>
			</fields>
		</compfield>
	</dataspec>
	
</datasourcespec>




http://www.statcrunch.com/index.php
http://www.usgovxml.com
http://www.fueleconomy.gov/feg/ws/index.shtml
http://www.census.gov/did/www/saipe/data/index.html?eml=gd&utm_medium=email&utm_source=govdelivery
http://services.faa.gov/airport/status/JFK?format=application/xml
http://openflights.org/data.html
http://www.ourairports.com/data/
http://www.wunderground.com/weather/api/d/docs

https://explore.data.gov/Health-and-Nutrition/MyPyramid-Food-Raw-Data/b978-7txq
  (use fndds 3.0 food coding scheme: http://www.ars.usda.gov/Services/docs.htm?docid=12074#view   good for string startsWith example - food codes)

http://catalog.data.gov/dataset
https://explore.data.gov/catalog/raw




http://www.generatedata.com
http://lib.stat.cmu.edu



